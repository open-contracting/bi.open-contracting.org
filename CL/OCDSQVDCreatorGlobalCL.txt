///$tab Main
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 ₴;-# ##0,00 ₴';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD.MM.YYYY';
SET TimestampFormat='DD.MM.YYYY hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='uk-UA';
SET CreateSearchIndexOnReload=1;
SET MonthNames='січ.;лют.;бер.;квіт.;трав.;черв.;лип.;серп.;вер.;жовт.;лист.;груд.';
SET LongMonthNames='січень;лютий;березень;квітень;травень;червень;липень;серпень;вересень;жовтень;листопад;грудень';
SET DayNames='пн;вт;ср;чт;пт;сб;нд';
SET LongDayNames='понеділок;вівторок;середа;четвер;пʼятниця;субота;неділя';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

///$tab 00. Paths
REM Select environment (for data connection names)
	0 = dev
    1 = test
    2 = prod
;

SET scrEnvironment = 2;

IF scrEnvironment = 0 THEN 

    // Paths to local Data //dev
	SET scr_DC_path = 'lib://root - karandin (rbcgrp_karandin)/karandin/OCDS CL';
    
    //Web Connection Name //dev
    SET scrURLConnectionName = 'lib://karandin_test_CDB3_timberSpecies (rbcgrp_karandin)';
    
    //Data connection names //dev
    SET RESTCurrencyConnection 	= 'fixer.io (rbcgrp_karandin)';
    SET DBConnection			= 'OCDSDB - PostgreSQL (rbcgrp_karandin)';


ELSEIF scrEnvironment = 1 THEN 

    // Paths to local Data //test
	SET scr_DC_path = 'lib://OCDSint/Chile';
    
    //Web Connection Name //test
    SET scrURLConnectionName = 'lib://WorldPopulation';
    
    //Data connection names //test
    SET RESTCurrencyConnection 	= 'fixer.io';
	SET DBConnection			= 'OCDSDB';
    
ELSEIF scrEnvironment = 2 THEN

    // Paths to local Data //prod
	SET scr_DC_path = 'lib://OCDSint/Chile';

    //Web Connection Name //prod
    SET scrURLConnectionName = 'lib://WorldPopulation';
    
    //Data connection names //prod
    SET RESTCurrencyConnection 	= 'fixer.io';
	SET DBConnection			= 'OCDSDB';
    
ENDIF;

//Global

LET scrDIC_QVD_PATH_GB 			= scr_DC_path&'/Global/01_QVDDB/01_Dictionary/';
LET scrTRN_QVD_PATH_GB 			= scr_DC_path&'/Global/01_QVDDB/02_Transaction/';
LET scrLOCAL_DATA_PATH 			= scr_DC_path&'/Global/01_QVDDB/03_LocalData/';
LET scrLOCAL_FILES_PATH 		= scr_DC_path&'/Global/02_LocalFiles/';

//Open

LET scrDIC_QVD_PATH_OP 			= scr_DC_path&'/Open/01_QVDDB/01_Dictionary/';
LET scrTRN_QVD_PATH_OP			= scr_DC_path&'/Open/01_QVDDB/02_Transaction/';
// LET scrLOCAL_DATA_PATH_OP 		= scr_DC_path&'/Open/01_QVDDB/03_LocalData/';
// LET scrLOCAL_FILES_PATH_OP 		= scr_DC_path&'/Open/02_LocalFiles/';

///$tab Parameters
// Variables for incremental load
Let scrCurrentDate = Today(1);
Set scrStartCEYear = 2019; // for currency exchange
Let scrEndYear = Year(scrCurrentDate);

//Current year and # previous
Set scrYearsLoad = 2;  
Let scrStartYear = scrEndYear - scrYearsLoad;

// API key for fixer.io (Currency Exchange)
Set scrFixerAPIkey 	= '***';

//Procurement category dictionary web address
SET scrUNSPSC		= 'https://apis.mercadopublico.cl/OCDS/data/productos/categoria/';
///$tab Procurement Category
//UNSPSC

DistinctProcurementCategory:
NoConcatenate
LOAD  null() AS procurementURL
AutoGenerate(0);

//Define Periods to Load

REM Define which periods to load.
Note that .qvd filenames are in *YYYYMM.qvd format
;

PeriodsToLoad:
LOAD '$(scrStartYear)' + RowNo() - 1 AS Years
AutoGenerate scrEndYear - scrStartYear + 1 
;

LEFT JOIN(PeriodsToLoad)
LOAD NUM(RowNo(), '00') AS Months
AutoGenerate(12)
;

LEFT JOIN(PeriodsToLoad)
LOAD Years,
	 Months,
     Years&Months AS YearMonth
RESIDENT PeriodsToLoad;

RENAME TABLE PeriodsToLoad TO PeriodsToLoad_;

PeriodsToLoad:
NoConcatenate
LOAD YearMonth
RESIDENT PeriodsToLoad_
WHERE YearMonth <= Year('$(scrCurrentDate)')&NUM(Month('$(scrCurrentDate)'),'00')
;

DROP TABLE PeriodsToLoad_;

//Start loop

FOR EACH itrPeriod IN FIELDVALUELIST('YearMonth')

	  TRACE Current period is $(itrPeriod);

	  IF NOT ISNULL(FILESIZE('$(scrTRN_QVD_PATH_OP)AwardItems$(itrPeriod).qvd')) THEN 

	  TRACE Current file is $(scrTRN_QVD_PATH_OP)AwardItems$(itrPeriod);
      Concatenate(DistinctProcurementCategory)
      LOAD DISTINCT 
          item_classification_id,
          item_classification_uri AS procurementURL,
          item_classification_scheme
      FROM [$(scrTRN_QVD_PATH_OP)AwardItems$(itrPeriod).qvd]
      (qvd)
      WHERE NOT EXISTS(procurementURL,item_classification_uri)
      ;
      ENDIF;

	  IF NOT ISNULL(FILESIZE('$(scrTRN_QVD_PATH_OP)TenderItems$(itrPeriod).qvd')) THEN 
      TRACE Current file is $(scrTRN_QVD_PATH_OP)TenderItems$(itrPeriod);
      Concatenate(DistinctProcurementCategory)
      LOAD DISTINCT
          item_classification_id,
          item_classification_uri AS procurementURL,
          item_classification_scheme
      FROM [$(scrTRN_QVD_PATH_OP)TenderItems$(itrPeriod).qvd]
      (qvd)
      WHERE NOT EXISTS(procurementURL,item_classification_uri)
      ;
	  ENDIF;
      
NEXT itrPeriod;

DROP TABLE PeriodsToLoad;

//loop ended

IF NOOFROWS('DistinctProcurementCategory') = 0 THEN 

TRACE Attention!;
TRACE No procurement categories are loaded.;
TRACE Please check your script.;
TRACE Exiting script execution.;

ENDIF;

//Check which categories are already present

Directory [$(scrDIC_QVD_PATH_GB)];

LEFT JOIN(DistinctProcurementCategory)
LOAD item_classification_id,
LEFT (item_classification_id, LEN(item_classification_id)-1) AS item_classification_id_upper
RESIDENT DistinctProcurementCategory;

ProcurementCategoryURLs:
NoConcatenate
LOAD FIRSTVALUE(item_classification_id) AS item_classification_id_distinct
	 ,TEXT(item_classification_id_upper&'0') AS item_classification_id_upper_distinct
RESIDENT DistinctProcurementCategory
WHERE NOT ISNULL(procurementURL)
GROUP BY item_classification_id_upper
;

IF NOT ISNULL(FILESIZE('ProcurementCategories.qvd')) THEN
    ProcurementCategories:
    NoConcatenate
    LOAD  	CodigoProducto
			,NombreProducto
			,CodigoCategoria
			,NombreCategoria
    FROM [ProcurementCategories.qvd]
    (qvd);
    
    ELSE
    
    ProcurementCategories:
    NoConcatenate
    LOAD null() AS CodigoProducto
    AutoGenerate(0);
ENDIF; 
   

RENAME TABLE ProcurementCategoryURLs TO ProcurementCategoryURLs_;

LET scrTrace = NOOFROWS('ProcurementCategories');
TRACE No of records loaded from stored dictionary = $(scrTrace);

IF NOOFROWS('ProcurementCategories') > 0 THEN 

      ProcurementCategoryURLs:
      NoConcatenate
      LOAD item_classification_id_distinct,
           item_classification_id_upper_distinct
      RESIDENT ProcurementCategoryURLs_
      WHERE NOT EXISTS(CodigoProducto, item_classification_id_distinct)
      ;
      
      ELSE 
      ProcurementCategoryURLs:
      NoConcatenate
      LOAD item_classification_id_distinct,
           item_classification_id_upper_distinct
      RESIDENT ProcurementCategoryURLs_
      ;
      
ENDIF;

DROP TABLE ProcurementCategoryURLs_;

LIB CONNECT TO '$(RESTCurrencyConnection)';

FOR EACH itrProcurementCategory IN FIELDVALUELIST('item_classification_id_distinct')

      RestConnectorMasterTable:
      SQL SELECT 
          "CodigoCategoria",
          "NombreCategoria",
          "__KEY_root",
          (SELECT 
              "CodigoProducto",
              "NombreProducto",
              "__FK_Productos"
          FROM "Productos" FK "__FK_Productos")
      FROM JSON (wrap on) "root" PK "__KEY_root"
      WITH CONNECTION (
        URL "$(scrUNSPSC)$(itrProcurementCategory)");

      [Productos]:
      LOAD	TEXT([CodigoProducto]) AS [CodigoProducto_],
          [NombreProducto],
          [__FK_Productos] AS [__KEY_root]
      RESIDENT RestConnectorMasterTable
      WHERE NOT IsNull([__FK_Productos]);

      //[root]:
      LEFT JOIN(Productos)
      LOAD	TEXT([CodigoCategoria]) AS [CodigoCategoria],
          [NombreCategoria],
          [__KEY_root]
      RESIDENT RestConnectorMasterTable
      WHERE NOT IsNull([__KEY_root]);

      DROP TABLE RestConnectorMasterTable;

	  CONCATENATE(ProcurementCategories)
      LOAD  CodigoProducto_ AS CodigoProducto
			,NombreProducto
			,CodigoCategoria
			,NombreCategoria
	  RESIDENT Productos
      WHERE NOT EXISTS(CodigoProducto, CodigoProducto_)
      ;
      
      DROP TABLE Productos;
            
NEXT itrProcurementCategory;

DROP TABLE ProcurementCategoryURLs;
DROP TABLE DistinctProcurementCategory;

STORE ProcurementCategories INTO [ProcurementCategories.qvd];
DROP TABLE ProcurementCategories;
///$tab Currency Exchange
// Currency Exchange

Directory [$(scrTRN_QVD_PATH_GB)];

LIB CONNECT TO '$(RESTCurrencyConnection)';

SUB GetCE(CUR1, CUR2, CEdate, CEtable)
//		 'MDL','USD','2021-01-01','Currency'
  
  RestConnectorMasterTable:
  SQL SELECT 
      "success",
      "timestamp",
      "historical",
      "base",
      "date",
      "__KEY_root",
      (SELECT 
          "$(CUR1)",
          "__FK_rates"
      FROM "rates" FK "__FK_rates")
  FROM JSON (wrap on) "root" PK "__KEY_root"
  WITH CONNECTION (
  URL "https://data.fixer.io/api/$(CEdate)",
  QUERY "access_key" "$(scrFixerAPIkey)",
  QUERY "base" "$(CUR2)",
  QUERY "symbols" "$(CUR1)"
  );

  Currency_:
  LOAD	
       $(CUR1) as Rate,
       '$(CUR1)'&'$(CUR2)' as Currency,
       [__FK_rates] AS [__KEY_root]
  RESIDENT RestConnectorMasterTable
  WHERE NOT IsNull([__FK_rates]);

  LEFT JOIN (Currency_)
  LOAD	
      Date(Date#([date], 'YYYY-MM-DD')) as CEdate,
      [__KEY_root]
  RESIDENT RestConnectorMasterTable
  WHERE NOT IsNull([__KEY_root]);

  DROP TABLE RestConnectorMasterTable;
  
  Concatenate ($(CEtable))
  Load
  	   Rate,
       Currency,
       CEdate
  Resident Currency_
  Where NOT IsNull(CEdate);    
  Drop Table Currency_;
ENDSUB

// Alternative procedure version
// SUB GetCE(CUR1, CUR2, CEdate, CEtable)
// //		 'MDL','USD','2021-01-01','Currency'

//   Currency_:
//   NoConcatenate
//   LOAD
//       Date(Date#(@1, 'DD-MM-YY')) as CEdate,
//       @2 as Rate,
//       '$(CUR1)'&'$(CUR2)' as Currency
//   FROM [lib://MedicalDataFileRep]
//   (html, codepage is 28591, no labels, table is @2,
//   url is 'https://fx-rate.net/historical/?c_input=$(CUR2)&cp_input=$(CUR1)&date_to_input=$(CEdate)&range_input=7');
  
//   Inner Join (Currency_)
//   Load
//   		Date('$(CEdate)') as CEdate
//   AutoGenerate 1;  
  
//   Concatenate ($(CEtable))
//   Load
//   	 *
//   Resident Currency_;    
//   Drop Table Currency_;
// ENDSUB

Let scrIterPeriod = scrStartCEYear;

DO 	
	Let scrStartCE = Date(MakeDate(scrIterPeriod), 'YYYY-MM-DD');
	Let scrEndCE = Date(RangeMin(YearEnd(MakeDate(scrIterPeriod)), scrCurrentDate), 'YYYY-MM-DD');
    
    Currency:
    Load * Inline [
    CEdate, Rate, Currency
    ];

	IF NOT IsNull(FileSize('Currency$(scrIterPeriod).qvd')) THEN
      CurrencyLocal:
      NoConcatenate
      Load
           *
      From [Currency$(scrIterPeriod).qvd] (qvd);  

      CurrencyTmp:
      Load
           Max(CEdate) as MaxCEdate
      Resident CurrencyLocal;   
      
      Drop Table CurrencyLocal;

      Let scrStartCE = Date(Peek('MaxCEdate', -1, 'CurrencyTmp') + 1, 'YYYY-MM-DD');
      Drop Table CurrencyTmp;
	ENDIF
	
    IF scrStartCE <= scrEndCE THEN
    	TRACE Currency Exchange for period from $(scrStartCE) to $(scrEndCE);
    ENDIF
    
    DO While scrStartCE <= scrEndCE
		TRACE Currency Date = $(scrStartCE);
    	CALL GetCE('USD', 'CLF', '$(scrStartCE)', 'Currency');
        CALL GetCE('CLP', 'USD', '$(scrStartCE)', 'Currency');
        CALL GetCE('USD', 'EUR', '$(scrStartCE)', 'Currency');
        CALL GetCE('EUR', 'CLF', '$(scrStartCE)', 'Currency');
        CALL GetCE('CLP', 'EUR', '$(scrStartCE)', 'Currency');
        CALL GetCE('CLP', 'CLF', '$(scrStartCE)', 'Currency');
    	Let scrStartCE = Date(scrStartCE + 1, 'YYYY-MM-DD');
    LOOP
    
    IF NoOfRows('Currency') > 0 THEN
    	IF NOT IsNull(FileSize('Currency$(scrIterPeriod).qvd')) THEN
          Concatenate (Currency)
          Load Distinct
               *
          From [Currency$(scrIterPeriod).qvd] (qvd);    
        ENDIF
        
        TRACE Store Currency for $(scrIterPeriod);
        Store Currency into [Currency$(scrIterPeriod).qvd] (qvd);
    ENDIF
    
    Drop Table Currency;

	Let scrIterPeriod = scrIterPeriod + 1;
LOOP While scrIterPeriod <= scrEndYear
;
///$tab Coordinates
Directory [$(scrDIC_QVD_PATH_GB)];


ProcuringEntityArea:
LOAD
    CHL_adm1.Name 	AS [procuring_entity_region_name],
//     CHL_adm1.Point 	AS [],
    CHL_adm1.Area	AS [procuring_entity_region_coordinates]
//     ,CHL_adm1.Line	AS []
FROM [$(scrLOCAL_FILES_PATH)CHL_adm1.kml]
(kml, Table is [Chile divisions. Level 1]);
 
// LOAD
//     [Procuring entity region],
//     [Procuring entity area]
// FROM MDA_adm1.qvd (qvd);

STORE ProcuringEntityArea INTO [ProcuringEntityArea.qvd];
DROP TABLE ProcuringEntityArea;
///$tab Exit script
Exit script;